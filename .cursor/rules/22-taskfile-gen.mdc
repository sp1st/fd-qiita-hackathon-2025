
use github

ユーザーから与えられた情報を使って、taskfile を作成します

## 手順

- 実現したい内容をユーザーに確認します
- JIRAチケットから作成する場合はチケットのURLを取得します
- work/template/taskfile-template.md を参照します

- file 名を生成します

### JIRAチケットのとき

- チケット番号を取得します

filename: {JIRAチケット番号}-taskfile

- work/template/taskfile-template.md のテンプレートから work/taskfile/{filename}.md を作成します

### 自然言語のとき

title: 概要を 50 文字以内の英語で表したもの
filename: {title}-taskfile

- work/template/taskfile-template.md のテンプレートから work/taskfile/{filename}.md を作成します
- ナレッジやルールを参照して作成した taskfile の内容を充実させます。

## 完了条件/テスト駆動開発の作業手順

作業項目の組み立ては、基本的に完了条件/テスト駆動開発の順序で構成します：

### 完了条件 サイクル

- 完了条件を定義します
- ユーザーによる完了条件のレビュー
- 完了条件がユーザーによるレビュー済みなことを確認します
- 作業項目実施後に、完了条件を満たしているかを確認します
- 完了条件を満たしていない場合は、作業項目を追加して実施します
- 完了条件を満たしたあとは、ユーザーによるレビューを受けます
- 「確認点→回答」の1サイクルでレビュー済みとしてはいけません。レビュー済みとしたという、ユーザーの明確な指示が必要です

### TDD サイクル

【重要】
コードの生成がアウトプットでない場合は完了条件の明確化とユーザーレビューを重視する、に読み替えてください。

1. **テストファイル記述** - 実装する機能のテストを先に記述
2. **ユーザーによるテスト内容レビュー** - テスト内容の妥当性をユーザーと確認
3. **テストが期待通り失敗することの確認（Red）** - テストを実行して適切に失敗することを確認
4. **ロジックの実装** - テストが通るように機能を実装
5. **テストが通ることの確認（Green）** - 実装後にテストが成功することを確認

### 実装順序の原則

- **バックエンド優先**: データベース → モデル → API → フロントエンド の順
- **コア機能優先**: 基本機能 → 拡張機能 → UI/UX 調整 の順
- **リスク軽減**: 技術的難易度の高い部分を先に実装

### 作業項目例

```markdown
- [ ] User モデルテストの作成
  - [ ] [テストファイル作成](mdc:spec/models/user_spec.rb)
  - [ ] 新項目のテスト記述
  - [ ] ユーザーによるテスト内容レビュー
  - [ ] テストが期待通り失敗することの確認
- [ ] User モデル実装
  - [ ] マイグレーションファイルの作成
  - [ ] モデルの項目追加
  - [ ] テストが通ることの確認
```

[注意点]

- 作業には着手せずに、必要十分なタスクファイルの記述を作成することにフォーカスして下さい。
- ゴールを定めながらの作業になります。出力内容を私の方でも確認しながら作業を進めさせて下さい。
- 完了条件の定義は特に重要です。必要十分なもの検討して、ユーザーと相談しながらブラッシュアップしていきます。
- 作業リストは全て markdown のチェックリストで作成します。h3 などのセクションは切り出してはいけません。作業の中で、マイルストーンのたびに私からのレビューの作業項目もチェックリストの中に作成して下さい。
- **TDD 原則**: テスト記述 → ユーザーレビュー → Red → 実装 → Green の順序を徹底します。
- 不明点は都度聞いて下さい。
